
password.expired.service.js

(function() {
    'use strict';

    angular
        .module('gatewayApp')
        .factory('PasswordExpired', PasswordExpired);


    PasswordExpired.$inject = ['$resource'];

    function PasswordExpired($resource) {
        var service = $resource('uaa/api/account/change_expired_password', {}, {});

        return service;
    }
})();        


-------------------------------
AccountRessource.java
@Inject
private AuthenticationManager manager;

@PostMapping(path = "/account/change_expired_password",
    produces = MediaType.TEXT_PLAIN_VALUE)
@Timed
public ResponseEntity<?> changeExpiredPassword(@RequestBody UserDTO userDTO) {
    Authentication authenticate = null;
    try {
        manager.authenticate(new UsernamePasswordAuthenticationToken(userDTO.getLogin(), userDTO.getOldPassword()));
    }catch (CredentialsExpiredException e){
        // change password
        userService.changeExpiredPassword(userDTO.getLogin(), userDTO.getNewPassword());
    }

    return new ResponseEntity<>(HttpStatus.OK);
}

-----------------------

UAAConfiguration.java

.antMatchers("/api/account/change_expired_password").permitAll()

------------------------
UserDetailsService.java

return new org.springframework.security.core.userdetails.User(lowercaseLogin,
    user.getPassword(), true, true, false, true,
    grantedAuthorities);




-------------------
LoginController.js

LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', 'PasswordExpired', '$uibModalInstance'];

vm.changeExpiredPassword = changeExpiredPassword;
vm.newPassword = null;
vm.isPasswordExpired = false;

function login (event) {
    event.preventDefault();
    Auth.login({
        username: vm.username,
        password: vm.password,
        rememberMe: vm.rememberMe
    }).then(function () {
        vm.authenticationError = false;
        $uibModalInstance.close();
        if ($state.current.name === 'register' || $state.current.name === 'activate' ||
            $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {
            $state.go('home');
        }

        $rootScope.$broadcast('authenticationSuccess');

        // previousState was set in the authExpiredInterceptor before being redirected to login modal.
        // since login is succesful, go to stored previousState and clear previousState
        if (Auth.getPreviousState()) {
            var previousState = Auth.getPreviousState();
            Auth.resetPreviousState();
            $state.go(previousState.name, previousState.params);
        }
    }).catch(function (err) {
        vm.authenticationError = true;
        if(err && err.data && err.data.error_description === 'User credentials have expired'){
            vm.isPasswordExpired = true;
        }
    });
}

function changeExpiredPassword(){
    PasswordExpired.save({login: vm.username, oldPassword: vm.password, newPassword: vm.newPassword});
}
